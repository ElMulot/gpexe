security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto
        
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            
            pattern: ^/
            user_checker: App\Security\UserChecker

            # This allows the user to login by submitting a username and password
            # Reference: https://symfony.com/doc/current/security/form_login_setup.html
            form_login:
                # The route name that the login form submits to
                check_path: login
                # The name of the route where the login form lives
                # When the user tries to access a protected page, they are redirected here
                login_path: login
                # Secure the login form against CSRF
                # Reference: https://symfony.com/doc/current/security/csrf.html
                enable_csrf: true
                # Define the always_use_default_target_path boolean option to ignore the previously requested URL and always redirect to the default page
                # session (for example when the users access directly to the login page).
                default_target_path: home
                # Ignore the previously requested URL and always redirect to the default page
                always_use_default_target_path: true
        
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800 # 1 week in seconds

            # https://symfony.com/doc/current/security/impersonating_user.html
            switch_user: true

            logout:
                # The route name the user can go to in order to logout
                path: logout
                # The name of the route to redirect to after logging out
                target: login

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: '^/login$',                                                      roles: PUBLIC_ACCESS, requires_channel: '%env(SCHEME)%' }
        - { path: '^/logout$',                                                     roles: PUBLIC_ACCESS }
        - { path: '^/automation/cron$',                                            roles: PUBLIC_ACCESS }
        
        - { path: '^/project/\d+/alert$',                                          roles: ROLE_USER }
        - { path: '^/project/all$',                                                roles: ROLE_USER } #projects_list
        - { path: '^/project/\d+$',                                                roles: ROLE_USER } #project
        - { path: '^/project/\d+/\d+$',                                            roles: ROLE_USER } #serie_route
        - { path: '^/project/\d+/(sdr|mdr|all)$',                                  roles: ROLE_USER } #serie_route_by_type
        - { path: '^/project/\d+/serie/(sdr|mdr|all)/?\d*',                        roles: ROLE_USER } #document, document_table
        
        - { path: '^/project/\d+/view',                                            roles: ROLE_USER } #view, view_new
        - { path: '^/project/view/\d+/',                                           roles: ROLE_USER } #view_edit, view_delete
        
        - { path: '^/project/serie/document/\d+/detail$',                          roles: ROLE_USER } #document_detail
        - { path: '^/project/serie/document/version/\d+/detail$',                  roles: ROLE_USER } #version_detail
        
        - { path: '^/project/serie/document/version/\d+/\d+/review',               roles: ROLE_USER } #review, review_new
        - { path: '^/project/serie/document/version/review/\d+/',                  roles: ROLE_USER } #review_edit, review_delete
        
        - { path: '^/project/program/\d+/(dashboard|preload|load)',                roles: ROLE_USER } #program_dashboard, program_preload, program_load

        - { path: '^/project/serie/\d+/document/new$',                             roles: ROLE_EDITOR } #document_new
        - { path: '^/project/serie/document/(edit|move|delete)',                   roles: ROLE_EDITOR } #document_edit, document_move, document_delete
        - { path: '^/project/serie/document/\d+/version/new$',                     roles: ROLE_EDITOR } #version_new
        - { path: '^/project/serie/document/version/(edit|delete)',                roles: ROLE_EDITOR } #version_edit, version_delete
        - { path: '^/project/serie/document/\d+/version/\d+/\d+/quick_new',        roles: ROLE_EDITOR } #version_quick_new
        - { path: '^/project/serie/document/version/\d+/quick_edit/',              roles: ROLE_EDITOR } #version_quick_edit
        
        - { path: '^/project/',                                                    roles: ROLE_CONTROLLER } #projects_new, #projects_edit, #projects_delete
        
        - { path: '^/company',                                                     roles: ROLE_ADMIN }
        - { path: '^/user',                                                        roles: ROLE_ADMIN }
        - { path: '^/profil',                                                      roles: ROLE_ADMIN }
        - { path: '^/log',                                                         roles: ROLE_ADMIN }

        - { path: '^/',                                                            roles: ROLE_USER }

    role_hierarchy:
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
        ROLE_ADMIN: [ROLE_CONTROLLER]
        ROLE_CONTROLLER: [ROLE_EDITOR]
        ROLE_EDITOR: [ROLE_USER]

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
